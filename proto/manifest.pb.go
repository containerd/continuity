// Code generated by protoc-gen-go.
// source: manifest.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	manifest.proto

It has these top-level messages:
	Manifest
	Resource
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

// Manifest specifies the entries in a container bundle, keyed and sorted by
// path.
type Manifest struct {
	Resource []*Resource `protobuf:"bytes,1,rep,name=resource" json:"resource,omitempty"`
}

func (m *Manifest) Reset()                    { *m = Manifest{} }
func (m *Manifest) String() string            { return proto1.CompactTextString(m) }
func (*Manifest) ProtoMessage()               {}
func (*Manifest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Manifest) GetResource() []*Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type Resource struct {
	// Path specifies the path from the bundle root. If more than one
	// path is present, the entry may represent a hardlink, rather than using
	// a link target. The path format is operating system specific.
	Path []string `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
	// Uid specifies the user id for the resource. A string type is used for
	// compatibility across different OS.
	Uid string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	// Gid specifies the group id for the resource. A string type is used for
	// compatibility across different OS.
	Gid string `protobuf:"bytes,3,opt,name=gid" json:"gid,omitempty"`
	// reserved for future use. As such, they are marked as deprecated.
	// User specifies the user associated for the resource. The user should
	// will be used in preference to the Uid when the two do not match
	// on a system.
	User string `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	// Group specifies the group associated for the resource. The group should
	// will be used in preference to the Gid when the two do not match
	// on a system.
	Group string `protobuf:"bytes,5,opt,name=group" json:"group,omitempty"`
	// Mode defines the file mode and permissions. We've used the same
	// bit-packing from Go's os package,
	// http://golang.org/pkg/os/#FileMode, since they've done the work of
	// creating a cross-platform layout.
	Mode uint32 `protobuf:"varint,6,opt,name=mode" json:"mode,omitempty"`
	// Size specifies the size in bytes of the resource. This is only valid
	// for regular files.
	Size uint64 `protobuf:"varint,7,opt,name=size" json:"size,omitempty"`
	// Digest specifies the content digest of the target file. Only valid for
	// regular files. The strings are formatted as <alg>:<digest hex bytes>.
	// The digests are sorted in lexical order and implementations may choose
	// which algorithms they prefer.
	Digest []string `protobuf:"bytes,8,rep,name=digest" json:"digest,omitempty"`
	// Target defines the target of a hard or soft link. Absolute links start
	// with a slash and specify the resource relative to the bundle root.
	// Relative links do not start with a slash and are relative to the
	// resource path.
	Target string `protobuf:"bytes,9,opt,name=target" json:"target,omitempty"`
	// Major specifies the major device number for charactor and block devices.
	Major uint64 `protobuf:"varint,10,opt,name=major" json:"major,omitempty"`
	// Minor specifies the minor device number for charactor and block devices.
	Minor uint64 `protobuf:"varint,11,opt,name=minor" json:"minor,omitempty"`
	// Xattr provides storage for extended attributes for the target resource.
	Xattr map[string][]byte `protobuf:"bytes,12,rep,name=xattr" json:"xattr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Ads stores one or more alternate data streams for the target resource.
	Ads map[string][]byte `protobuf:"bytes,13,rep,name=ads" json:"ads,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto1.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Resource) GetXattr() map[string][]byte {
	if m != nil {
		return m.Xattr
	}
	return nil
}

func (m *Resource) GetAds() map[string][]byte {
	if m != nil {
		return m.Ads
	}
	return nil
}

func init() {
	proto1.RegisterType((*Manifest)(nil), "proto.Manifest")
	proto1.RegisterType((*Resource)(nil), "proto.Resource")
}

var fileDescriptor0 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0xd5, 0xa6, 0x29, 0xe9, 0xb5, 0x05, 0x64, 0x21, 0x74, 0xea, 0x54, 0x75, 0x42, 0x20,
	0x45, 0x08, 0x24, 0xa8, 0xd8, 0x18, 0x18, 0x59, 0x3c, 0xb1, 0x1a, 0x62, 0x42, 0x80, 0xc4, 0x91,
	0xed, 0x20, 0xca, 0xaf, 0xe3, 0xa7, 0xe1, 0x3b, 0xa7, 0x20, 0x75, 0x63, 0xea, 0x7b, 0x9f, 0xdf,
	0x5d, 0x2f, 0x0f, 0xf6, 0x6b, 0xd5, 0x54, 0xcf, 0xda, 0xf9, 0xbc, 0xb5, 0xc6, 0x1b, 0x91, 0xf2,
	0xcf, 0xea, 0x1a, 0xb2, 0xfb, 0xfe, 0x41, 0x9c, 0x41, 0x66, 0xb5, 0x33, 0x9d, 0x7d, 0xd2, 0x38,
	0x58, 0x26, 0x27, 0xd3, 0x8b, 0x83, 0x18, 0xce, 0x65, 0x8f, 0xe5, 0x6f, 0x60, 0xf5, 0x9d, 0x40,
	0xb6, 0xc5, 0x42, 0xc0, 0xa8, 0x55, 0xfe, 0x85, 0xa7, 0x26, 0x92, 0xb5, 0x38, 0x84, 0xa4, 0xab,
	0x0a, 0x1c, 0x2e, 0x07, 0x01, 0x91, 0x24, 0x52, 0x06, 0x92, 0x44, 0x12, 0x24, 0xcd, 0x75, 0x4e,
	0x5b, 0x1c, 0x31, 0x62, 0x2d, 0x8e, 0x20, 0x2d, 0xad, 0xe9, 0x5a, 0x4c, 0x19, 0x46, 0x43, 0xc9,
	0xda, 0x14, 0x1a, 0xc7, 0x01, 0xce, 0x25, 0x6b, 0x62, 0xae, 0xfa, 0xd2, 0xb8, 0x17, 0xd8, 0x48,
	0xb2, 0x16, 0xc7, 0x30, 0x2e, 0xaa, 0x32, 0x7c, 0x0d, 0x66, 0x7c, 0x4b, 0xef, 0x88, 0x7b, 0x65,
	0x4b, 0xed, 0x71, 0xc2, 0x6b, 0x7b, 0x47, 0xff, 0x56, 0xab, 0x57, 0x63, 0x11, 0x78, 0x49, 0x34,
	0x4c, 0xab, 0x26, 0xd0, 0x69, 0x4f, 0xc9, 0x88, 0x73, 0x48, 0x3f, 0x95, 0xf7, 0x16, 0x67, 0x5c,
	0xce, 0x62, 0xa7, 0x9c, 0xfc, 0x81, 0x1e, 0xef, 0x1a, 0x6f, 0x37, 0x32, 0x06, 0xc5, 0x29, 0x24,
	0xaa, 0x70, 0x38, 0xe7, 0x3c, 0xee, 0xe6, 0x6f, 0x0b, 0x17, 0xd3, 0x14, 0x5a, 0xac, 0x01, 0xfe,
	0x16, 0x50, 0x57, 0x6f, 0x7a, 0x13, 0x0a, 0xe5, 0xae, 0x82, 0xa4, 0x9b, 0x3e, 0xd4, 0x7b, 0xa7,
	0xb9, 0xd1, 0x99, 0x8c, 0xe6, 0x66, 0xb8, 0x1e, 0x2c, 0xae, 0x20, 0xdb, 0xae, 0xfa, 0xcf, 0xdc,
	0xe3, 0x98, 0xef, 0xb9, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x34, 0x8d, 0x5a, 0x6f, 0x1b, 0x02,
	0x00, 0x00,
}
